#  Makefile.rules - OCERA make framework common project rules -*- makefile -*-
#   
#  (C) Copyright 2003 by Pavel Pisa - OCERA team member
#
#  The uLan driver is distributed under the Gnu General Public License. 
#  See file COPYING for details.
#
#
# input variables
# V                .. if set to 1, full command text is shown else short form is used
# SUBDIRS          .. list of subdirectories intended for make from actual directory
# lib_LIBRARIES    .. list of the user-space libraries
# shared_LIBRARIES .. list of the user-space shared libraries
# kernel_LIBRARIES .. list of the kernel-space libraries
# rtlinux_LIBRARIES.. list of the RT-Linux kernel-space libraries
# include_HEADERS  .. list of the user-space public header files
# nobase_include_HEADERS .. public headers copied even with directory part
# renamed_include_HEADERS .. public headers copied to the different target name
# kernel_HEADERS   .. list of the kernel-space public header files
# rtlinux_HEADERS  .. list of the RT-Linux kernel-space public header files
# bin_PROGRAMS     .. list of the require binary programs
# utils_PROGRAMS   .. list of the development utility programs
# kernel_MODULES   .. list of the kernel side modules/applications
# rtlinux_MODULES  .. list of RT-Linux the kernel side modules/applications
# xxx_SOURCES      .. list of specific target sources
# INCLUDES         .. additional include directories and defines for user-space
# kernel_INCLUDES  .. additional include directories and defines for kernel-space
# rtlinux_INCLUDES .. additional include directories and defines for RT-Linux
# default_CONFIG   .. list of default config assignments CONFIG_XXX=y/n ...
#
# LINUX_DIR        .. location of Linux kernel sources
# RTL_DIR          .. location of RT-Linux sources

# Hack to check RT-Linux rules
#LINUX_DIR := /home/cvs/ocera/ocera-build/kernel/linux
#RTL_DIR := /home/cvs/ocera/ocera-build/kernel/rtlinux
#CONFIG_RTLINUX = y
#OCERA_DIR := $(shell ( cd -L $(MAKERULES_DIR)/../../../.. ; pwd -L ) )
-include $(MAKERULES_DIR)/OCERA_TOP_DIR

BUILD_DIR_NAME = _build
COMPILED_DIR_NAME = _compiled
ifndef GROUP_DIR_NAME
GROUP_DIR_NAME = nogroup
endif

# We need to ensure definition of sources directory first
ifndef SOURCES_DIR
SOURCES_DIR := $(shell ( pwd -L ) )
endif

all: default

ifdef OCERA_DIR
ifeq ($(wildcard $(OCERA_DIR)/ocera.mk),)
$(warning "ocera.mk" file does not exist. Adapt Makefile.rules for standalone compilation)
$(warning (comment out definition of OCERA_DIR line and optionally select RTL_DIR) )
$(error or go to the ocera/ directory and do 'make' to generate the "ocera.mk" file first, please)
endif
include $(OCERA_DIR)/ocera.mk
KERN_INCLUDE_DIR := $(OCERA_KERNEL_INCLUDES_DIR)
KERN_LIB_DIR     := $(OCERA_KERNEL_LIBRARIES_DIR)
KERN_MODULES_DIR := $(OCERA_MODULES_DIR)
KERN_BUILD_DIR   := $(BUILD_DIR)/kern/$(GROUP_DIR_NAME)
KERN_MODPOST_DIR := $(BUILD_DIR)/kern-modpost
USER_INCLUDE_DIR := $(OCERA_USER_INCLUDES_DIR)
USER_LIB_DIR     := $(OCERA_USER_LIBRARIES_DIR)
USER_UTILS_DIR   := $(TARGET_DIR)/usr/bin
USER_BIN_DIR     := $(TARGET_DIR)/usr/bin
USER_BUILD_DIR   := $(BUILD_DIR)/user/$(GROUP_DIR_NAME)
#LINUX_DIR        := $(OCERA_DIR)/kernel/linux
#RTL_DIR          := $(OCERA_DIR)/kernel/rtlinux
#CONFIG_FILE      := $(OCERA_DIR)/emdebsys/.config 
ifneq ($(wildcard $(CONFIG_FILE)),)
#include $(CONFIG_FILE)
CONFIG_FILE_OK = y
endif
else # OCERA_DIR
KERN_INCLUDE_DIR := $(MAKERULES_DIR)/$(COMPILED_DIR_NAME)/include-kern
KERN_LIB_DIR     := $(MAKERULES_DIR)/$(COMPILED_DIR_NAME)/lib-kern
KERN_MODULES_DIR := $(MAKERULES_DIR)/$(COMPILED_DIR_NAME)/modules
KERN_BUILD_DIR   := $(MAKERULES_DIR)/$(BUILD_DIR_NAME)/kern
KERN_MODPOST_DIR := $(MAKERULES_DIR)/$(BUILD_DIR_NAME)/kern-modpost
USER_INCLUDE_DIR := $(MAKERULES_DIR)/$(COMPILED_DIR_NAME)/include
USER_LIB_DIR     := $(MAKERULES_DIR)/$(COMPILED_DIR_NAME)/lib
USER_UTILS_DIR   := $(MAKERULES_DIR)/$(COMPILED_DIR_NAME)/bin-utils
USER_BIN_DIR     := $(MAKERULES_DIR)/$(COMPILED_DIR_NAME)/bin
USER_BUILD_DIR   := $(MAKERULES_DIR)/$(BUILD_DIR_NAME)/user
ifndef CONFIG_FILE
CONFIG_FILE      := $(MAKERULES_DIR)/config.omk
endif
ifneq ($(wildcard $(CONFIG_FILE)-default),)
-include $(CONFIG_FILE)-default
else
$(warning Please, run "make default-config" first)
endif
ifneq ($(wildcard $(CONFIG_FILE)),)
include $(CONFIG_FILE)
CONFIG_FILE_OK = y
endif
ifndef LINUX_VERSION
LINUX_VERSION=$(shell uname -r)
endif
ifndef LINUX_DIR
LINUX_DIR=/lib/modules/$(LINUX_VERSION)/build
endif
endif # OCERA_DIR

# Check and include real OCERA style Makefile.omk now
ifndef OMK_INCLUDED
include $(SOURCES_DIR)/Makefile.omk
OMK_INCLUDED := 1
endif

# Check for target
OS_TARGET = linux
ifeq ($(OS),Windows_NT)
  OS_TARGET = win32
endif

export SOURCES_DIR MAKERULES_DIR RELATIVE_DIR LINUX_DIR LINUX_VERSION RTL_DIR
export CONFIG_FILE OMK_SERIALIZE_INCLUDED OMK_VERBOSE OMK_SILENT
export OS_TARGET

#CFLAGS += -ggdb
CFLAGS += -O2 
CFLAGS += -Wall
#CXXFLAGS += -ggdb
CXXFLAGS += -O2
CXXFLAGS += -Wall


CPPFLAGS  += -I $(USER_INCLUDE_DIR)

LOADLIBES += -L$(USER_LIB_DIR) 

LOADLIBES += $(lib_LOADLIBES:%=-l%)

LIB_CPPFLAGS += $(CPPFLAGS)
LIB_CFLAGS   += $(CFLAGS)

SOLIB_PICFLAGS += -shared 
ifeq ($(OS_TARGET),linux)
  SOLIB_PICFLAGS += -fpic
endif

SOLIB_EXT = so
ifeq ($(OS_TARGET),win32)
  SOLIB_EXT = dll
endif

ifndef RELATIVE_DIR
RELATIVE_DIR := $(SOURCES_DIR:$(MAKERULES_DIR)%=%)
endif
override RELATIVE_DIR := $(RELATIVE_DIR:/%=%)
override RELATIVE_DIR := $(RELATIVE_DIR:\\%=%)
#$(warning  RELATIVE_DIR $(RELATIVE_DIR))
override BACK2TOP_DIR := $(shell echo $(RELATIVE_DIR)/ | sed -e 's_//_/_g' -e 's_/\./_/_g' -e 's_^\./__g'  -e 's_\([^/][^/]*\)_.._g' -e 's_/$$__')
#$(warning  BACK2TOP_DIR $(BACK2TOP_DIR))

#$(warning SOURCES_DIR = $(SOURCES_DIR))
#$(warning MAKERULES_DIR = $(MAKERULES_DIR))
#$(warning RELATIVE_DIR = $(RELATIVE_DIR))

override RELATIVE_PREFIX := $(RELATIVE_DIR)/
override RELATIVE_PREFIX := $(RELATIVE_PREFIX:/%=%)

#$(warning RELATIVE_PREFIX = $(RELATIVE_PREFIX))

#vpath %.c $(SOURCES_DIR)
#vpath %.cc $(SOURCES_DIR)
#vpath %.cxx $(SOURCES_DIR)

VPATH = $(SOURCES_DIR)
srcdir = $(SOURCES_DIR)

USER_OBJS_DIR = $(USER_BUILD_DIR)/$(RELATIVE_DIR)
KERN_OBJS_DIR = $(KERN_BUILD_DIR)/$(RELATIVE_DIR)

.PHONY: default dep subdirs clean clean-custom cleandepend default-config
.PHONY: check-make-ver check-dir include-pass library-pass binary-pass utils-pass
.PHONY: kernel-lib-pass kernel-pass kernel-mod-pass kernel-modpost-pass default-config-pass
.PHONY: check-dir-local include-pass-local library-pass-local binary-pass-local 
.PHONY: utils-pass-local kernel-lib-pass-local kernel-mod-pass-local kernel-modpost-pass-local
.PHONY: default-config-pass-local

# Some support to serialize some targets for parallel make
ifneq ($(OMK_SERIALIZE_INCLUDED),y)
include-pass: check-dir
library-pass: include-pass
binary-pass utils-pass: library-pass
kernel-lib-pass: include-pass
kernel-mod-pass: kernel-lib-pass
kernel-modpost-pass: kernel-mod-pass
kernel-pass: kernel-mod-pass kernel-modpost-pass

OMK_SERIALIZE_INCLUDED = y
endif

# Defines for quiet compilation
ifdef V
  ifeq ("$(origin V)", "command line")
    OMK_VERBOSE = $(V)
  endif
endif
ifndef OMK_VERBOSE
  OMK_VERBOSE = 0
endif
ifeq ($(OMK_VERBOSE),1)
  Q =
else
  Q = @
endif
ifneq ($(findstring s,$(MAKEFLAGS)),)
  QUIET_CMD_ECHO = true
  OMK_SILENT = 1
else
  QUIET_CMD_ECHO = echo
  CPHEADER_FLAGS += -v
endif

default: check-make-ver check-dir include-pass library-pass binary-pass utils-pass kernel-lib-pass kernel-pass

#=====================================================================
# Common utility rules

define mkdir_def
	[ -d $(1) ] || mkdir -p $(1) || exit 1
endef

ifdef LOCAL_CONFIG_H

$(LOCAL_CONFIG_H) : $(wildcard $(CONFIG_FILE)) $(wildcard $(CONFIG_FILE)-default)
	@echo LOCAL_CONFIG_H=`pwd`/$(LOCAL_CONFIG_H)
	@echo "/* Automatically generated from */" > "$(LOCAL_CONFIG_H).tmp"
	@echo "/* config file : $< */" >> "$(LOCAL_CONFIG_H).tmp"
	@echo "#ifndef _LOCAL_CONFIG_H" >> "$(LOCAL_CONFIG_H).tmp"
	@echo "#define _LOCAL_CONFIG_H" >> "$(LOCAL_CONFIG_H).tmp"
	@( $(foreach x, $(shell echo $(default_CONFIG) | sed -e 's/\<\([^ ]*\)=[^ ]\>/\1/g' ), \
		echo $(x).$($(x)) ; ) echo ; ) | \
		sed -n -e 's/^\(.*\)\.[ym]$$/#define \1 1/p' \
		  >> "$(LOCAL_CONFIG_H).tmp"
	@echo "#endif /*_LOCAL_CONFIG_H*/" >> "$(LOCAL_CONFIG_H).tmp"
	@if cmp --quiet "$(LOCAL_CONFIG_H).tmp" "$(LOCAL_CONFIG_H)" ; then \
	echo rm "$(LOCAL_CONFIG_H).tmp" ; \
	else mv "$(LOCAL_CONFIG_H).tmp" "$(LOCAL_CONFIG_H)" ; \
	echo Updated configuration "$(LOCAL_CONFIG_H)" ; fi

endif

check-make-ver:
	@GOOD_MAKE_VERSION=`echo $(MAKE_VERSION) | sed -n -e 's/^[4-9]\..*\|^3\.9[0-9].*\|^3\.8[1-9].*/y/p'` ; \
	if [ x$$GOOD_MAKE_VERSION != xy ] ; then \
		echo "Your make program version is too old and does not support OMK system." ; \
		echo "Please update to make program 3.81beta1 or newer." ; exit 1 ; \
	fi

#=====================================================================
# User-space rules and templates to compile programs, libraries etc.

ifdef USER_RULE_TEMPLATES


#%.lo: %.c
#	$(CC) -o $@ $(LCFLAGS) -c $<

c_o_COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \
	$(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -DOMK_FOR_USER

cc_o_COMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \
	$(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -DOMK_FOR_USER

idl_COMPILE = $(IDL_COMPILER)

# Check GCC version for user build
ifndef CC_MAJOR_VERSION
CC_MAJOR_VERSION := $(shell $(CC) -dumpversion | sed -e 's/\([^.]\)\..*/\1/')
endif
# Prepare suitable define for dependency building
ifeq ($(CC_MAJOR_VERSION),2)
CC_DEPFLAGS = -Wp,-MD,"$@.d.tmp"
else
CC_DEPFLAGS = -MT $@ -MD -MP -MF "$@.d.tmp"
endif




define COMPILE_c_o_template
$(2): $(1) $(LOCAL_CONFIG_H)
	@$(QUIET_CMD_ECHO) "  CC      $$@"
	$(Q) if $$(c_o_COMPILE) $$(CC_DEPFLAGS) $(3) -o $$@ -c $$< ; \
	then mv -f "$$@.d.tmp" "$$@.d" ; \
	else rm -f "$$@.d.tmp" ; exit 1; \
	fi
endef



define COMPILE_cc_o_template
$(2): $(1) $(LOCAL_CONFIG_H)
	@$(QUIET_CMD_ECHO) "  CXX     $$@"
	$(Q) if $$(cc_o_COMPILE) $$(CC_DEPFLAGS) $(3) -o $$@ -c $$< ; \
	then mv -f "$$@.d.tmp" "$$@.d" ; \
	else rm -f "$$@.d.tmp" ; exit 1; \
	fi
endef

define COMPILE_idl_template
$(2).c $(2).h: $(1)
	@$(QUIET_CMD_ECHO) "  IDL     $$@"
	$(Q) $$(idl_COMPILE) $(1)
endef


define PROGRAM_template

USER_IDLS  += $$($(1)_IDL) 
$(1)_OBJS += $$(filter %.o,$$($(1)_IDL:%.idl=%.o))
USER_GEN_SOURCES += $$(filter %.c,$$($(1)_IDL:%.idl=%.c))

$(1)_OBJS += $$(filter %.o,$$($(1)_SOURCES:%.c=%.o))
$(1)_OBJS += $$(filter %.o,$$($(1)_SOURCES:%.cc=%.o))
$(1)_OBJS += $$(filter %.o,$$($(1)_SOURCES:%.cxx=%.o))
$(1)_OBJS := $$(sort $$($(1)_OBJS))

USER_OBJS  += $$($(1)_OBJS)
USER_SOURCES += $$($(1)_SOURCES)

$(2)/$(1): $$($(1)_OBJS)
	@$(QUIET_CMD_ECHO) "  LINK    $$@"
	$(Q) $$(shell if [ -z "$$(filter %.cc,$$($(1)_SOURCES:%.cxx=%.cc))" ] ; then echo $$(CC) ; else echo $$(CXX) ; fi) \
	  $$($(1)_OBJS) $$($(1)_LIBS:%=-l%) $$(LOADLIBES) $$(LDFLAGS) -Wl,-Map,$(USER_OBJS_DIR)/$(1).exe.map -o $(2)/$(1)
	@echo "$(2)/$(1): \\" >$(USER_OBJS_DIR)/$(1).exe.d
	@sed -n -e 's/^LOAD \(.*\)$$$$/  \1  \\/p' $(USER_OBJS_DIR)/$(1).exe.map  >>$(USER_OBJS_DIR)/$(1).exe.d
	@echo >>$(USER_OBJS_DIR)/$(1).exe.d
endef



define LIBRARY_template

USER_IDLS  += $$($(1)_IDL) 
$(1)_OBJS += $$(filter %.o,$$($(1)_IDL:%.idl=%.o))
USER_GEN_SOURCES += $$(filter %.c,$$($(1)_IDL:%.idl=%.c))

$(1)_OBJS += $$(filter %.o,$$($(1)_SOURCES:%.c=%.o))
$(1)_OBJS += $$(filter %.o,$$($(1)_SOURCES:%.cc=%.o))
$(1)_OBJS += $$(filter %.o,$$($(1)_SOURCES:%.cxx=%.o))
$(1)_OBJS := $$(sort $$($(1)_OBJS))

USER_OBJS  += $$($(1)_OBJS)
USER_SOURCES += $$($(1)_SOURCES)

$(USER_LIB_DIR)/lib$(1).a: $$($(1)_OBJS)
	@$(QUIET_CMD_ECHO) "  AR      $$@"
	$(Q) $(AR) rcs $$@ $$^
endef



define SOLIB_template

USER_IDLS  += $$($(1)_IDL) 
$(1)_OBJSLO += $$(filter %.lo,$$($(1)_IDL:%.idl=%.lo))
SOLIB_GEN_SOURCES += $$(filter %.c,$$($(1)_IDL:%.idl=%.c))

$(1)_OBJSLO += $$(filter %.lo,$$($(1)_SOURCES:%.c=%.lo))
$(1)_OBJSLO += $$(filter %.lo,$$($(1)_SOURCES:%.cc=%.lo))
$(1)_OBJSLO += $$(filter %.lo,$$($(1)_SOURCES:%.cxx=%.lo))
$(1)_OBJSLO := $$(sort $$($(1)_OBJSLO))

SOLIB_OBJS  += $$($(1)_OBJSLO)
SOLIB_SOURCES += $$($(1)_SOURCES)

$(USER_LIB_DIR)/lib$(1).$(SOLIB_EXT): $$($(1)_OBJSLO)
	@$(QUIET_CMD_ECHO) "  LINK    $$@"
	$(Q) $(LD) --shared --soname=lib$(1).$(SOLIB_EXT) -o $$@ $$^ $(LOADLIBES) 
endef



library-pass-local: $(lib_LIBRARIES:%=$(USER_LIB_DIR)/lib%.a) $(shared_LIBRARIES:%=$(USER_LIB_DIR)/lib%.$(SOLIB_EXT))

binary-pass-local: $(bin_PROGRAMS:%=$(USER_BIN_DIR)/%)

utils-pass-local: $(utils_PROGRAMS:%=$(USER_UTILS_DIR)/%)

$(foreach prog,$(utils_PROGRAMS),$(eval $(call PROGRAM_template,$(prog),$(USER_UTILS_DIR))))

$(foreach prog,$(bin_PROGRAMS),$(eval $(call PROGRAM_template,$(prog),$(USER_BIN_DIR))))

$(foreach lib,$(lib_LIBRARIES),$(eval $(call LIBRARY_template,$(lib))))

$(foreach lib,$(shared_LIBRARIES),$(eval $(call SOLIB_template,$(lib))))

-include $(USER_OBJS_DIR)/*.d

endif

#=====================================================================
# Kernel-space rules and templates to compile modules, libraries etc.

ifdef KERN_RULE_TEMPLATES

$(KERN_LIB_DIR)/kernel.mk: $(LINUX_DIR)/.config $(MAKERULES_DIR)/kernelcfg2mk
	@$(QUIET_CMD_ECHO) "  KCFG2MK $$@"
	$(Q) $(MAKERULES_DIR)/kernelcfg2mk $(LINUX_DIR) $(KERN_LIB_DIR)

ifeq ($(CONFIG_RTLINUX),y)
include $(RTL_DIR)/rtl.mk

KERN_CC = $(CC)
kern_GCCLIB_DIR=$(shell LANG=C LC_ALL=C LC_MESSAGES=C $(CC) -print-search-dirs | sed -n -e 's/^install: \(.*\)$$/\1/p' )
INCLUDES := -I $(KERN_INCLUDE_DIR) $(INCLUDE) $(rtlinux_INCLUDES) $(kernel_INCLUDES)
#-DEXPORT_NO_SYMBOLS
c_o_kern_COMPILE = $(KERN_CC) -idirafter $(kern_GCCLIB_DIR)/include $(INCLUDES)  $(CFLAGS) -DOMK_FOR_KERNEL -DEXPORT_SYMTAB -nostdinc
cc_o_kern_COMPILE = $(CXX) $(INCLUDES) $(CXXFLAGS) -DOMK_FOR_KERNEL -DEXPORT_SYMTAB
KERN_EXE_SUFFIX := .o
KERN_ARCH = $(ARCH)
KERN_LD = $(LD)
KERN_AR = $(AR)

else # CONFIG_RTLINUX

include $(KERN_LIB_DIR)/kernel.mk

ifeq ($(LINUX_SRC),)
LINUX_SRC = $(LINUX_DIR)
endif
kernel_INCLUDES += -idirafter $(LINUX_SRC)/include/linux

ifdef LINUX_CC
KERN_CC = $(LINUX_CC)
kern_GCCLIB_DIR=$(shell LANG=C LC_ALL=C LC_MESSAGES=C $(LINUX_CC) -print-search-dirs | sed -n -e 's/^install: \(.*\)$$/\1/p' )
else
KERN_CC = echo KERN_CC not defined - compilation skipped
endif
c_o_kern_COMPILE = $(KERN_CC) $(kernel_INCLUDES) -idirafter $(kern_GCCLIB_DIR)/include $(LINUX_CPPFLAGS) $(LINUX_CFLAGS) $(LINUX_CFLAGS_MODULE) -DOMK_FOR_KERNEL -DEXPORT_SYMTAB -nostdinc
cc_o_kern_COMPILE = $(KERN_CC) $(kernel_INCLUDES) -idirafter $(kern_GCCLIB_DIR)/include $(LINUX_CPPFLAGS) $(LINUX_CFLAGS) $(LINUX_CFLAGS_MODULE) -DOMK_FOR_KERNEL -DEXPORT_SYMTAB
KERN_EXE_SUFFIX := $(LINUX_MODULE_EXT)
KERN_LDFLAGS = $(LINUX_LDFLAGS)
ifdef LINUX_ARCH
KERN_ARCH = $(LINUX_ARCH)
else
KERN_ARCH = echo KERN_ARCH not defined - skipped
endif
ifdef LINUX_LD
KERN_LD = $(LINUX_LD)
else
KERN_LD = echo KERN_LD  not defined - skipped
endif
ifneq ($(LINUX_AR),)
KERN_AR = $(LINUX_AR)
else
KERN_AR = $(AR)
endif
endif # CONFIG_RTLINUX

KERN_LOADLIBES += -L$(KERN_LIB_DIR) 

KERN_LOADLIBES += $(rtlinux_LOADLIBES:%=-l%)
KERN_LOADLIBES += $(kernel_LOADLIBES:%=-l%)



# Check GCC version for kernel part of build
ifndef kern_CC_MAJOR_VERSION
kern_CC_MAJOR_VERSION := $(shell $(KERN_CC) -dumpversion | sed -e 's/\([^.]\)\..*/\1/')
endif
# Prepare suitable define for dependency building
ifeq ($(kern_CC_MAJOR_VERSION),2)
kern_CC_DEPFLAGS = -Wp,-MD,"$@.d.tmp"
else
kern_CC_DEPFLAGS = -MT $@ -MD -MP -MF "$@.d.tmp"
endif

ifeq ($(KERN_EXE_SUFFIX),.ko)
ifeq ($(wildcard $(LINUX_DIR)/scripts/mod/modpost),)
KERN_MODPOST = $(LINUX_DIR)/scripts/modpost
else
KERN_MODPOST = $(LINUX_DIR)/scripts/mod/modpost
endif
KERN_MODULES_LINK_DIR = $(KERN_MODPOST_DIR)
KERN_LINK_SUFFIX = .o
else
KERN_MODULES_LINK_DIR = $(KERN_MODULES_DIR)
KERN_LINK_SUFFIX = $(KERN_EXE_SUFFIX)
endif

define COMPILE_c_o_kern_template

$(2): $(1) $(LOCAL_CONFIG_H)
	@$(QUIET_CMD_ECHO) "  CC [K]  $$@"
	$(Q) if $$(c_o_kern_COMPILE) $$(kern_CC_DEPFLAGS) $(3) -DKBUILD_BASENAME=$(notdir $(basename $(1))) \
	-o $$@ -c $$< ; \
	then mv -f "$$@.d.tmp" "$$@.d" ; \
	else rm -f "$$@.d.tmp" ; exit 1; \
	fi
endef



define COMPILE_cc_o_kern_template

$(2): $(1) $(LOCAL_CONFIG_H)
	@$(QUIET_CMD_ECHO) "  CXX [K] $$@"
	$(Q) if $$(cc_o_kern_COMPILE) $$(kern_CC_DEPFLAGS) $(3) -DKBUILD_BASENAME=$(notdir $(basename $(1))) \
	-o $$@ -c $$< ; \
	then mv -f "$$@.d.tmp" "$$@.d" ; \
	else rm -f "$$@.d.tmp" ; exit 1; \
	fi
endef



define MODULE_kern_template
$(1)_OBJS += $$(filter %.o,$$($(1)_SOURCES:%.c=%.o))
$(1)_OBJS += $$(filter %.o,$$($(1)_SOURCES:%.cc=%.o))
$(1)_OBJS += $$(filter %.o,$$($(1)_SOURCES:%.cxx=%.o))
$(1)_OBJS := $$(sort $$($(1)_OBJS))

KERN_OBJS  += $$($(1)_OBJS)
KERN_SOURCES += $$($(1)_SOURCES)

# this is hack to build "__this_module" structure for 2.6.x kernels
# modpost is used for that purpose now

#$(1).mod.c:
#	echo  "\
#	#include <linux/version.h>@\
#	#include <linux/module.h>@\
#	#if (LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,5))@\
#	#include <linux/vermagic.h>@\
#	#include <linux/compiler.h>@\
#	@\
#	MODULE_INFO(vermagic, VERMAGIC_STRING);@\
#	@\
#	#undef unix@\
#	struct module __this_module@\
#	__attribute__((section(\".gnu.linkonce.this_module\"))) = {@\
#	 .name = __stringify(KBUILD_MODNAME),@\
#	 .init = init_module,@\
#	#ifdef CONFIG_MODULE_UNLOAD@\
#	 .exit = cleanup_module,@\
#	#endif@\
#	};@\
#	#endif@\
#	" | tr @ \\n >$$@ 
   

#$(eval $(call COMPILE_c_o_kern_template,$(1).mod.c,$(1).mod.o,-DKBUILD_MODNAME=$(1)))

$(2)/$(1)$(KERN_LINK_SUFFIX): $$($(1)_OBJS)
	@$(QUIET_CMD_ECHO) "  LD [K]  $$@"
	$(Q) $$(KERN_LD) $$(KERN_LDFLAGS) -r $$($(1)_OBJS) -L$$(kern_GCCLIB_DIR) $$($(1)_LIBS:%=-l%) $$(KERN_LOADLIBES) -Map $(KERN_OBJS_DIR)/$(1).mod.map -o $$@
	@echo "$(2)/$(1)$(KERN_LINK_SUFFIX): \\" >$(KERN_OBJS_DIR)/$(1).mod.d
	@sed -n -e 's/^LOAD \(.*\)$$$$/  \1  \\/p' $(KERN_OBJS_DIR)/$(1).mod.map  >>$(KERN_OBJS_DIR)/$(1).mod.d
	@echo >>$(KERN_OBJS_DIR)/$(1).mod.d
	@if [ "$(KERN_EXE_SUFFIX)" == ".ko" ] ; then \
	  echo $(1) >>$(KERN_MODPOST_DIR)/module-changes ; \
	  echo $(1) >>$(KERN_MODPOST_DIR)/$(1).mod.stamp ; \
	fi

endef



define LIBRARY_kern_template
$(1)_OBJS += $$(filter %.o,$$($(1)_SOURCES:%.c=%.o))
$(1)_OBJS += $$(filter %.o,$$($(1)_SOURCES:%.cc=%.o))
$(1)_OBJS += $$(filter %.o,$$($(1)_SOURCES:%.cxx=%.o))
$(1)_OBJS := $$(sort $$($(1)_OBJS))

KERN_OBJS  += $$($(1)_OBJS)
KERN_SOURCES += $$($(1)_SOURCES)

$(KERN_LIB_DIR)/lib$(1).a: $$($(1)_OBJS)
	@$(QUIET_CMD_ECHO) "  AR [K]  $$@"
	$(Q) $(KERN_AR) rcs $$@ $$^
endef


ifdef LINUX_DIR

kernel-lib-pass-local: $(kernel_LIBRARIES:%=$(KERN_LIB_DIR)/lib%.a)

kernel-mod-pass-local: $(kernel_MODULES:%=$(KERN_MODULES_LINK_DIR)/%$(KERN_LINK_SUFFIX))

$(foreach module,$(kernel_MODULES),$(eval $(call MODULE_kern_template,$(module),$(KERN_MODULES_LINK_DIR))))

$(foreach lib,$(kernel_LIBRARIES),$(eval $(call LIBRARY_kern_template,$(lib))))

endif


ifeq ($(CONFIG_RTLINUX),y)

kernel-mod-pass-local: $(rtlinux_MODULES:%=$(KERN_MODULES_LINK_DIR)/%$(KERN_LINK_SUFFIX))

kernel-lib-pass-local: $(rtlinux_LIBRARIES:%=$(KERN_LIB_DIR)/lib%.a)

$(foreach module,$(rtlinux_MODULES),$(eval $(call MODULE_kern_template,$(module),$(KERN_MODULES_LINK_DIR))))

$(foreach lib,$(rtlinux_LIBRARIES),$(eval $(call LIBRARY_kern_template,$(lib))))

endif

ifeq ($(KERN_MODPOST_PASS),y)

MODULES_LIST :=	$(wildcard *.mod.stamp)
MODULES_LIST := $(MODULES_LIST:%.mod.stamp=%)

define MODPOST_kern_template
$(2) : $(1)$(KERN_LINK_SUFFIX) $(1).mod.c
	@$(QUIET_CMD_ECHO) "  LD [M]  $$@"
	$(Q) $$(cc_o_kern_COMPILE) -DKBUILD_BASENAME=$(1) -DKBUILD_MODNAME=$(1) -o $(1).mod.o -c $(1).mod.c
	$(Q) $$(KERN_LD) $$(KERN_LDFLAGS) $(1)$(KERN_LINK_SUFFIX) $(1).mod.o -r -o $$@
endef

kernel-modpost-versions: $(wildcard $(LINUX_DIR)/Module.symvers)
	@$(QUIET_CMD_ECHO) "  MODPOST    $(KERN_MODPOST_DIR)"
	@echo  >$(KERN_MODPOST_DIR)/modpost-running
	@rm -f $(KERN_MODPOST_DIR)/module-changes
	$(Q) $(KERN_MODPOST) $(MODULES_LIST:%=%$(KERN_LINK_SUFFIX)) $(^:%=-i %)

$(MODULES_LIST:%=%.mod.c) : kernel-modpost-versions

kernel-modpost-pass-local: $(MODULES_LIST:%=$(KERN_MODULES_DIR)/%$(KERN_EXE_SUFFIX))
	@rm -f $(KERN_MODPOST_DIR)/modpost-running

$(foreach module,$(MODULES_LIST),$(eval $(call MODPOST_kern_template,$(module),$(module:%=$(KERN_MODULES_DIR)/%$(KERN_EXE_SUFFIX)))))

endif

-include $(KERN_OBJS_DIR)/*.d

endif

#=====================================================================


kernel-lib-pass:
	+@$(foreach dir, $(SUBDIRS), $(call mkdir_def,$(KERN_OBJS_DIR)/$(dir)) ; \
		$(MAKE) SOURCES_DIR=$(SOURCES_DIR)/$(dir) \
		RELATIVE_DIR=$(RELATIVE_PREFIX)$(dir) -C $(KERN_OBJS_DIR)/$(dir) \
		-f $(SOURCES_DIR)/$(dir)/Makefile $@ || exit 1 ;)
	+@$(call mkdir_def,$(KERN_OBJS_DIR))
	+@if [ -n "$(kernel_LIBRARIES)$(rtlinux_LIBRARIES)" ] ; \
	then \
	    $(MAKE) --no-print-directory -C $(KERN_OBJS_DIR) \
		-f $(SOURCES_DIR)/Makefile KERN_RULE_TEMPLATES=y $(@:%=%-local) ; \
	fi

kernel-mod-pass:
	+@$(foreach dir, $(SUBDIRS), $(call mkdir_def,$(KERN_OBJS_DIR)/$(dir)) ; \
		$(MAKE) SOURCES_DIR=$(SOURCES_DIR)/$(dir) \
		RELATIVE_DIR=$(RELATIVE_PREFIX)$(dir) -C $(KERN_OBJS_DIR)/$(dir) \
		-f $(SOURCES_DIR)/$(dir)/Makefile $@ || exit 1 ;)
	+@$(call mkdir_def,$(KERN_OBJS_DIR))
	+@if [ -n "$(kernel_MODULES)$(rtlinux_MODULES)" ] ; \
	then \
	    $(MAKE) --no-print-directory -C $(KERN_OBJS_DIR) \
		-f $(SOURCES_DIR)/Makefile KERN_RULE_TEMPLATES=y $(@:%=%-local) ; \
	fi

kernel-modpost-pass:
	+@if [ -e "$(KERN_MODPOST_DIR)/module-changes" -o -e "$(KERN_MODPOST_DIR)/modpost-running" ] ; \
	then \
	    $(MAKE) --no-print-directory -C $(KERN_MODPOST_DIR) \
	       -f $(SOURCES_DIR)/Makefile KERN_RULE_TEMPLATES=y KERN_MODPOST_PASS=y $(@:%=%-local) ; \
	fi

library-pass binary-pass utils-pass:
	+@$(foreach dir, $(SUBDIRS), $(call mkdir_def,$(USER_OBJS_DIR)/$(dir)) ; \
		$(MAKE) SOURCES_DIR=$(SOURCES_DIR)/$(dir) \
		RELATIVE_DIR=$(RELATIVE_PREFIX)$(dir) -C $(USER_OBJS_DIR)/$(dir) \
		-f $(SOURCES_DIR)/$(dir)/Makefile $@ || exit 1 ;)
	+@$(foreach dir, $(QT_SUBDIRS), $(call mkdir_def,$(USER_OBJS_DIR)/$(dir)) ; \
		if [ "$@" != "binary-pass" ] ; then exit 0 ; fi ; \
		if [ ! -e $(SOURCES_DIR)/$(dir)/Makefile ] ; then  \
		( cd $(SOURCES_DIR)/$(dir) ; $$QTDIR/bin/qmake TOP_DIR=$(MAKERULES_DIR) \
		     RELATIVE_DIR=$(RELATIVE_PREFIX)$(dir) || exit 1 ;) ; fi ; \
		$(MAKE) SOURCES_DIR=$(SOURCES_DIR)/$(dir) \
		RELATIVE_DIR=$(RELATIVE_PREFIX)$(dir) -C $(SOURCES_DIR)/$(dir) \
		-f $(SOURCES_DIR)/$(dir)/Makefile || exit 1 ;)
	+@$(call mkdir_def,$(USER_OBJS_DIR))
	@$(MAKE) --no-print-directory -C $(USER_OBJS_DIR) \
		-f $(SOURCES_DIR)/Makefile USER_RULE_TEMPLATES=y $(@:%=%-local)


dep clean install check-dir include-pass default-config-pass:
	+@$(foreach dir, $(SUBDIRS), $(call mkdir_def,$(USER_OBJS_DIR)/$(dir)) ; \
		$(MAKE) SOURCES_DIR=$(SOURCES_DIR)/$(dir) \
		RELATIVE_DIR=$(RELATIVE_PREFIX)$(dir) -C $(USER_OBJS_DIR)/$(dir) \
		-f $(SOURCES_DIR)/$(dir)/Makefile $@ || exit 1 ;)
	+@$(call mkdir_def,$(USER_OBJS_DIR))
	@$(MAKE) --no-print-directory -C $(USER_OBJS_DIR) \
		-f $(SOURCES_DIR)/Makefile $(@:%=%-local)


dep-local:
	
check-dir-local:
	@$(call mkdir_def,$(USER_OBJS_DIR))
	@$(call mkdir_def,$(KERN_OBJS_DIR))
	@$(call mkdir_def,$(USER_INCLUDE_DIR))
	@$(call mkdir_def,$(KERN_INCLUDE_DIR))
	@$(call mkdir_def,$(USER_LIB_DIR))
	@$(call mkdir_def,$(KERN_LIB_DIR))
	@$(call mkdir_def,$(USER_BIN_DIR))
	@$(call mkdir_def,$(USER_UTILS_DIR))
	@$(call mkdir_def,$(KERN_MODULES_DIR))
	@$(call mkdir_def,$(KERN_MODPOST_DIR))

install-local:

default-config:
	@echo "# Start of OMK config file" > "$(CONFIG_FILE)-default"
	@echo "# This file should not be altered manually" >> "$(CONFIG_FILE)-default"
	@echo "# Overrides should be stored in file $(notdir $(CONFIG_FILE))" >> "$(CONFIG_FILE)-default"
	@echo >> "$(CONFIG_FILE)-default"
	@$(MAKE) --no-print-directory -C $(MAKERULES_DIR) \
		RELATIVE_DIR="" SOURCES_DIR=$(MAKERULES_DIR) \
		-f $(MAKERULES_DIR)/Makefile default-config-pass

default-config-pass-local:
	@echo Default config for $(RELATIVE_DIR)
	@echo "# Config for $(RELATIVE_DIR)" >> "$(CONFIG_FILE)-default"
	@$(foreach x, $(default_CONFIG), echo $(x) | \
		sed -e 's/^.*=x$$/#\0/' >> "$(CONFIG_FILE)-default" ; )

include-pass-local:
	@$(call mkdir_def,$(USER_INCLUDE_DIR))
	@$(foreach f, $(include_HEADERS), cmp --quiet $(SOURCES_DIR)/$(f) $(USER_INCLUDE_DIR)/$(notdir $(f)) \
	   || cp $(CPHEADER_FLAGS) $(SOURCES_DIR)/$(f) $(USER_INCLUDE_DIR)/$(notdir $(f)) || exit 1 ; )
	@$(foreach f, $(nobase_include_HEADERS), cmp --quiet $(SOURCES_DIR)/$(f) $(USER_INCLUDE_DIR)/$(f) \
	   || ( mkdir -p $(USER_INCLUDE_DIR)/$(dir $(f)) && cp $(CPHEADER_FLAGS) $(SOURCES_DIR)/$(f) $(USER_INCLUDE_DIR)/$(f) ) || exit 1 ; )
	@$(foreach f, $(renamed_include_HEADERS), \
	   srcfname=`echo '$(f)' | sed -e 's/^\(.*\)->.*$$/\1/'` ; destfname=`echo '$(f)' | sed -e 's/^.*->\(.*\)$$/\1/'` ; \
	   cmp --quiet $(SOURCES_DIR)/$${srcfname} $(USER_INCLUDE_DIR)/$${destfname} \
	   || ( mkdir -p `dirname $(USER_INCLUDE_DIR)/$${destfname}` && cp $(CPHEADER_FLAGS) $(SOURCES_DIR)/$${srcfname} $(USER_INCLUDE_DIR)/$${destfname} ) || exit 1 ; )
# Kernel and RT-Linux stuff
	@$(call mkdir_def,$(KERN_INCLUDE_DIR))
	@$(foreach f, $(kernel_HEADERS) $(rtlinux_HEADERS), cmp --quiet $(SOURCES_DIR)/$(f) $(KERN_INCLUDE_DIR)/$(notdir $(f)) \
	   || cp $(CPHEADER_FLAGS) $(SOURCES_DIR)/$(f) $(KERN_INCLUDE_DIR)/$(notdir $(f)) || exit 1 ; )
	@$(foreach f, $(nobase_kernel_HEADERS) $(nobase_rtlinux_HEADERS), cmp --quiet $(SOURCES_DIR)/$(f) $(KERN_INCLUDE_DIR)/$(f) \
	   || ( mkdir -p $(KERN_INCLUDE_DIR)/$(dir $(f)) && cp $(CPHEADER_FLAGS) $(SOURCES_DIR)/$(f) $(KERN_INCLUDE_DIR)/$(f) ) || exit 1 ; )
	@$(foreach f, $(renamed_kernel_HEADERS) $(renamed_rtlinux_HEADERS), \
	   srcfname=`echo '$(f)' | sed -e 's/^\(.*\)->.*$$/\1/'` ; destfname=`echo '$(f)' | sed -e 's/^.*->\(.*\)$$/\1/'` ; \
	   cmp --quiet $(SOURCES_DIR)/$${srcfname} $(KERN_INCLUDE_DIR)/$${destfname} \
	   || ( mkdir -p `dirname $(KERN_INCLUDE_DIR)/$${destfname}` && cp $(CPHEADER_FLAGS) $(SOURCES_DIR)/$${srcfname} $(KERN_INCLUDE_DIR)/$${destfname} ) || exit 1 ; )

ifdef USER_RULE_TEMPLATES

# User-space static libraries and applications object files

USER_SOURCES := $(sort $(USER_SOURCES))

USER_GEN_SOURCES := $(sort $(USER_GEN_SOURCES))

#$(warning USER_SOURCES = $(USER_SOURCES))

$(foreach src,$(filter %.c,$(USER_SOURCES)),$(eval $(call COMPILE_c_o_template,$(SOURCES_DIR)/$(src),$(src:%.c=%.o),)))

$(foreach src,$(filter %.cc,$(USER_SOURCES)),$(eval $(call COMPILE_cc_o_template,$(SOURCES_DIR)/$(src),$(src:%.cc=%.o),)))

$(foreach src,$(filter %.cxx,$(USER_SOURCES)),$(eval $(call COMPILE_cc_o_template,$(SOURCES_DIR)/$(src),$(src:%.cxx=%.o),)))

$(foreach src,$(filter %.c,$(USER_GEN_SOURCES)),$(eval $(call COMPILE_c_o_template,$(src),$(src:%.c=%.o),)))

# User-space shared libraries object files

SOLIB_SOURCES := $(sort $(SOLIB_SOURCES))

SOLIB_GEN_SOURCES := $(sort $(SOLIB_GEN_SOURCES))

#$(warning SOLIB_SOURCES = $(SOLIB_SOURCES))
#$(warning SOLIB_GEN_SOURCES = $(SOLIB_GEN_SOURCES))

$(foreach src,$(filter %.c,$(SOLIB_SOURCES)),$(eval $(call COMPILE_c_o_template,$(SOURCES_DIR)/$(src),$(src:%.c=%.lo),$(SOLIB_PICFLAGS))))

$(foreach src,$(filter %.cc,$(SOLIB_SOURCES)),$(eval $(call COMPILE_cc_o_template,$(SOURCES_DIR)/$(src),$(src:%.cc=%.lo),$(SOLIB_PICFLAGS))))

$(foreach src,$(filter %.cxx,$(SOLIB_SOURCES)),$(eval $(call COMPILE_cc_o_template,$(SOURCES_DIR)/$(src),$(src:%.cxx=%.lo),$(SOLIB_PICFLAGS))))

$(foreach src,$(filter %.c,$(SOLIB_GEN_SOURCES)),$(eval $(call COMPILE_c_o_template,$(src),$(src:%.c=%.lo),$(SOLIB_PICFLAGS))))

# IDL compilation

USER_IDLS := $(sort $(USER_IDLS))

#$(warning USER_IDLS = $(USER_IDLS))

$(foreach src,$(filter %.idl,$(USER_IDLS)),$(eval $(call COMPILE_idl_template,$(SOURCES_DIR)/$(src),$(src:%.idl=%))))

endif

ifdef KERN_RULE_TEMPLATES

KERN_SOURCES := $(sort $(KERN_SOURCES))

#$(warning KERN_SOURCES = $(KERN_SOURCES))

$(foreach src,$(filter %.c,$(KERN_SOURCES)),$(eval $(call COMPILE_c_o_kern_template,$(SOURCES_DIR)/$(src),$(src:%.c=%.o),)))

$(foreach src,$(filter %.cc,$(KERN_SOURCES)),$(eval $(call COMPILE_cc_o_kern_template,$(SOURCES_DIR)/$(src),$(src:%.cc=%.o),)))

$(foreach src,$(filter %.cxx,$(KERN_SOURCES)),$(eval $(call COMPILE_cc_o_kern_template,$(SOURCES_DIR)/$(src),$(src:%.cxx=%.o),)))

endif


clean-local: clean-custom
	@echo Cleaning in $(KERN_OBJS_DIR) and $(USER_OBJS_DIR)
	@rm -f $(KERN_OBJS_DIR)/*.o $(USER_OBJS_DIR)/*.o $(USER_OBJS_DIR)/*.lo \
	       $(KERN_OBJS_DIR)/*.d $(USER_OBJS_DIR)/*.d \
	       $(KERN_OBJS_DIR)/*.map $(USER_OBJS_DIR)/*.map \
	       $(KERN_OBJS_DIR)/*.mod.c \
	       $(kernel_MODULES:%=$(KERN_MODPOST_DIR)/%.*) \
	       $(LOCAL_CONFIG_H:%=$(KERN_OBJS_DIR)/%) \
	       $(LOCAL_CONFIG_H:%=$(USER_OBJS_DIR)/%)
	@if [ -e $(KERN_LIB_DIR)/kernel.mk ] ; then \
	    touch -t 200001010101 $(KERN_LIB_DIR)/kernel.mk ; \
	fi
	       

